class Grafo:
    def __init__(self):
        self.vertices = set()
        self.nos_requeridos = {}

        self.arestas_requeridas = []
        self.arcos_requeridos = []

        self.arestas_nao_requeridas = []
        self.arcos_nao_requeridos = []

    def adicionar_no_requerido(self, id_no, demanda, custo_servico):
        self.nos_requeridos[id_no] = {
            "demanda": demanda,
            "custo_servico": custo_servico
        }
        self.vertices.add(id_no)

    def adicionar_aresta_requerida(self, de, para, custo_transporte, demanda, custo_servico):
        self.arestas_requeridas.append({
            "de": de,
            "para": para,
            "custo_transporte": custo_transporte,
            "demanda": demanda,
            "custo_servico": custo_servico
        })
        self.vertices.update([de, para])

    def adicionar_arco_requerido(self, de, para, custo_transporte, demanda, custo_servico):
        self.arcos_requeridos.append({
            "de": de,
            "para": para,
            "custo_transporte": custo_transporte,
            "demanda": demanda,
            "custo_servico": custo_servico
        })
        self.vertices.update([de, para])

    def adicionar_aresta_nao_requerida(self, de, para, custo_transporte):
        self.arestas_nao_requeridas.append({
            "de": de,
            "para": para,
            "custo_transporte": custo_transporte
        })
        self.vertices.update([de, para])

    def adicionar_arco_nao_requerido(self, de, para, custo_transporte):
        self.arcos_nao_requeridos.append({
            "de": de,
            "para": para,
            "custo_transporte": custo_transporte
        })
        self.vertices.update([de, para])

    # Métodos auxiliares
    def total_vertices(self):
        return len(self.vertices)

    def total_arestas_requeridas(self):
        return len(self.arestas_requeridas)

    def total_arcos_requeridos(self):
        return len(self.arcos_requeridos)


def ler_grafo_de_arquivo(caminho_arquivo):
    grafo = Grafo()

    # Flags de leitura
    lendo_nos = False
    lendo_arestas_req = False
    lendo_arcos_req = False
    lendo_arestas_nreq = False
    lendo_arcos_nreq = False

    cabecalhos = ["FROM", "TO", "T.", "DEMAND", "S.", "N."]

    with open(caminho_arquivo, 'r') as arquivo:
        for linha in arquivo:
            linha = linha.strip()
            if linha == "":
                continue

            # Mudança de seção
            if linha.startswith("ReN."):
                lendo_nos = True
                lendo_arestas_req = lendo_arcos_req = lendo_arestas_nreq = lendo_arcos_nreq = False
                continue
            elif linha.startswith("ReE."):
                lendo_arestas_req = True
                lendo_nos = lendo_arcos_req = lendo_arestas_nreq = lendo_arcos_nreq = False
                continue
            elif linha.startswith("ReA."):
                lendo_arcos_req = True
                lendo_nos = lendo_arestas_req = lendo_arestas_nreq = lendo_arcos_nreq = False
                continue
            elif linha.startswith("EDGE"):
                lendo_arestas_nreq = True
                lendo_nos = lendo_arestas_req = lendo_arcos_req = lendo_arcos_nreq = False
                continue
            elif linha.startswith("ARC"):
                lendo_arcos_nreq = True
                lendo_nos = lendo_arestas_req = lendo_arcos_req = lendo_arestas_nreq = False
                continue

            # Ignorar cabeçalhos
            if any(palavra in linha.upper() for palavra in cabecalhos):
                continue

            partes = linha.split()

            if lendo_nos and linha.startswith("N"):
                id_no = int(partes[0][1:])  # remove o 'N'
                demanda = int(partes[1])
                custo_servico = int(partes[2])
                grafo.adicionar_no_requerido(id_no, demanda, custo_servico)

            elif lendo_arestas_req and linha.startswith("E"):
                de = int(partes[1])
                para = int(partes[2])
                custo_transporte = int(partes[3])
                demanda = int(partes[4])
                custo_servico = int(partes[5])
                grafo.adicionar_aresta_requerida(de, para, custo_transporte, demanda, custo_servico)

            elif lendo_arcos_req and linha.startswith("A"):
                de = int(partes[1])
                para = int(partes[2])
                custo_transporte = int(partes[3])
                demanda = int(partes[4])
                custo_servico = int(partes[5])
                grafo.adicionar_arco_requerido(de, para, custo_transporte, demanda, custo_servico)

            elif lendo_arestas_nreq and linha.startswith("NrE"):
                de = int(partes[1])
                para = int(partes[2])
                custo_transporte = int(partes[3])
                grafo.adicionar_aresta_nao_requerida(de, para, custo_transporte)

            elif lendo_arcos_nreq and linha.startswith("NrA"):
                de = int(partes[1])
                para = int(partes[2])
                custo_transporte = int(partes[3])
                grafo.adicionar_arco_nao_requerido(de, para, custo_transporte)

    return grafo


# ===== Execução principal =====
if __name__ == "__main__":
    caminho = "mgval_0.50_10A.dat"
    grafo = ler_grafo_de_arquivo(caminho)

    print("=== Nós Requeridos ===")
    for id_no, dados in grafo.nos_requeridos.items():
        print(f"Nó {id_no}: Demanda = {dados['demanda']}, Custo de Serviço = {dados['custo_servico']}")

    print("\n=== Arestas Requeridas ===")
    for aresta in grafo.arestas_requeridas[:10]:
        print(f"{aresta['de']} ↔ {aresta['para']} | Custo = {aresta['custo_transporte']}, Demanda = {aresta['demanda']}, Serviço = {aresta['custo_servico']}")

    print("\n=== Arcos Requeridos ===")
    for arco in grafo.arcos_requeridos[:10]:
        print(f"{arco['de']} → {arco['para']} | Custo = {arco['custo_transporte']}, Demanda = {arco['demanda']}, Serviço = {arco['custo_servico']}")

    print("\n=== Arestas Não Requeridas ===")
    for aresta in grafo.arestas_nao_requeridas[:10]:
        print(f"{aresta['de']} ↔ {aresta['para']} | Custo = {aresta['custo_transporte']}")

    print("\n=== Arcos Não Requeridos ===")
    for arco in grafo.arcos_nao_requeridos[:10]:
        print(f"{arco['de']} → {arco['para']} | Custo = {arco['custo_transporte']}")

    print(f"\nTotal de vértices: {grafo.total_vertices()}")
    print(f"Total de arestas requeridas: {grafo.total_arestas_requeridas()}")
    print(f"Total de arcos requeridos: {grafo.total_arcos_requeridos()}")
